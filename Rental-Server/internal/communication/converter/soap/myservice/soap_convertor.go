// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Currency string

const (
	CurrencyUSD Currency = "USD"

	CurrencyJPY Currency = "JPY"

	CurrencyBGN Currency = "BGN"

	CurrencyCZK Currency = "CZK"

	CurrencyDKK Currency = "DKK"

	CurrencyGBP Currency = "GBP"

	CurrencyHUF Currency = "HUF"

	CurrencyPLN Currency = "PLN"

	CurrencyRON Currency = "RON"

	CurrencySEK Currency = "SEK"

	CurrencyCHF Currency = "CHF"

	CurrencyISK Currency = "ISK"

	CurrencyNOK Currency = "NOK"

	CurrencyTRY Currency = "TRY"

	CurrencyAUD Currency = "AUD"

	CurrencyBRL Currency = "BRL"

	CurrencyCAD Currency = "CAD"

	CurrencyCNY Currency = "CNY"

	CurrencyHKD Currency = "HKD"

	CurrencyIDR Currency = "IDR"

	CurrencyILS Currency = "ILS"

	CurrencyINR Currency = "INR"

	CurrencyKRW Currency = "KRW"

	CurrencyMXN Currency = "MXN"

	CurrencyMYR Currency = "MYR"

	CurrencyNZD Currency = "NZD"

	CurrencyPHP Currency = "PHP"

	CurrencySGD Currency = "SGD"

	CurrencyTHB Currency = "THB"

	CurrencyZAR Currency = "ZAR"

	CurrencyEUR Currency = "EUR"
)

type ConversionRequest struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ conversionRequest"`

	ConversionRequestPayload *ConversionRequestPayload `xml:"conversionRequestPayload,omitempty" json:"conversionRequestPayload,omitempty"`
}

type ConversionResponse struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ conversionResponse"`

	ConversionResponsePayload *ConversionResponsePayload `xml:"conversionResponsePayload,omitempty" json:"conversionResponsePayload,omitempty"`
}

type GetAvailableCurrencyRequest struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ getAvailableCurrencyRequest"`

	SenselessRequestPayload *SenselessRequestPayload `xml:"senselessRequestPayload,omitempty" json:"senselessRequestPayload,omitempty"`
}

type GetAvailableCurrencyResponse struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ getAvailableCurrencyResponse"`

	Currencies []*Currency `xml:"currencies,omitempty" json:"currencies,omitempty"`
}

type ConversionRequestPayload struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ conversionRequestPayload"`

	GivenCurrency *Currency `xml:"givenCurrency,omitempty" json:"givenCurrency,omitempty"`

	Amount float64 `xml:"amount,omitempty" json:"amount,omitempty"`

	RequiredCurrency *Currency `xml:"requiredCurrency,omitempty" json:"requiredCurrency,omitempty"`
}

type ConversionResponsePayload struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ conversionResponsePayload"`

	Amount float64 `xml:"amount,omitempty" json:"amount,omitempty"`

	ConvertedCurrency *Currency `xml:"convertedCurrency,omitempty" json:"convertedCurrency,omitempty"`
}

type SenselessRequestPayload struct {
	XMLName xml.Name `xml:"http://prestige-wheels.at/conversion/ senselessRequestPayload"`

	DontFill string `xml:"dontFill,omitempty" json:"dontFill,omitempty"`
}

type ConversionPort interface {
	Conversion(request *ConversionRequest) (*ConversionResponse, error)

	ConversionContext(ctx context.Context, request *ConversionRequest) (*ConversionResponse, error)

	GetAvailableCurrency(request *GetAvailableCurrencyRequest) (*GetAvailableCurrencyResponse, error)

	GetAvailableCurrencyContext(ctx context.Context, request *GetAvailableCurrencyRequest) (*GetAvailableCurrencyResponse, error)
}

type conversionPort struct {
	client *soap.Client
}

func NewConversionPort(client *soap.Client) ConversionPort {
	return &conversionPort{
		client: client,
	}
}

func (service *conversionPort) ConversionContext(ctx context.Context, request *ConversionRequest) (*ConversionResponse, error) {
	response := new(ConversionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *conversionPort) Conversion(request *ConversionRequest) (*ConversionResponse, error) {
	return service.ConversionContext(
		context.Background(),
		request,
	)
}

func (service *conversionPort) GetAvailableCurrencyContext(ctx context.Context, request *GetAvailableCurrencyRequest) (*GetAvailableCurrencyResponse, error) {
	response := new(GetAvailableCurrencyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *conversionPort) GetAvailableCurrency(request *GetAvailableCurrencyRequest) (*GetAvailableCurrencyResponse, error) {
	return service.GetAvailableCurrencyContext(
		context.Background(),
		request,
	)
}
