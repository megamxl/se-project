// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/currencyConvertor.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Convertor_Convert_FullMethodName              = "/Convertor/convert"
	Convertor_GetAvailableCurrency_FullMethodName = "/Convertor/getAvailableCurrency"
)

// ConvertorClient is the client API for Convertor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConvertorClient interface {
	Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error)
	GetAvailableCurrency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyList, error)
}

type convertorClient struct {
	cc grpc.ClientConnInterface
}

func NewConvertorClient(cc grpc.ClientConnInterface) ConvertorClient {
	return &convertorClient{cc}
}

func (c *convertorClient) Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConversionResponse)
	err := c.cc.Invoke(ctx, Convertor_Convert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *convertorClient) GetAvailableCurrency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrencyList)
	err := c.cc.Invoke(ctx, Convertor_GetAvailableCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConvertorServer is the server API for Convertor service.
// All implementations must embed UnimplementedConvertorServer
// for forward compatibility.
type ConvertorServer interface {
	Convert(context.Context, *ConversionRequest) (*ConversionResponse, error)
	GetAvailableCurrency(context.Context, *Empty) (*CurrencyList, error)
	mustEmbedUnimplementedConvertorServer()
}

// UnimplementedConvertorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConvertorServer struct{}

func (UnimplementedConvertorServer) Convert(context.Context, *ConversionRequest) (*ConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedConvertorServer) GetAvailableCurrency(context.Context, *Empty) (*CurrencyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCurrency not implemented")
}
func (UnimplementedConvertorServer) mustEmbedUnimplementedConvertorServer() {}
func (UnimplementedConvertorServer) testEmbeddedByValue()                   {}

// UnsafeConvertorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvertorServer will
// result in compilation errors.
type UnsafeConvertorServer interface {
	mustEmbedUnimplementedConvertorServer()
}

func RegisterConvertorServer(s grpc.ServiceRegistrar, srv ConvertorServer) {
	// If the following call pancis, it indicates UnimplementedConvertorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Convertor_ServiceDesc, srv)
}

func _Convertor_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertorServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Convertor_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertorServer).Convert(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Convertor_GetAvailableCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertorServer).GetAvailableCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Convertor_GetAvailableCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertorServer).GetAvailableCurrency(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Convertor_ServiceDesc is the grpc.ServiceDesc for Convertor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Convertor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Convertor",
	HandlerType: (*ConvertorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "convert",
			Handler:    _Convertor_Convert_Handler,
		},
		{
			MethodName: "getAvailableCurrency",
			Handler:    _Convertor_GetAvailableCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/currencyConvertor.proto",
}
