// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/megamxl/se-project/Rental-Server/internal/data/sql/dao/model"
)

func newBooking(db *gorm.DB, opts ...gen.DOOption) booking {
	_booking := booking{}

	_booking.bookingDo.UseDB(db, opts...)
	_booking.bookingDo.UseModel(&model.Booking{})

	tableName := _booking.bookingDo.TableName()
	_booking.ALL = field.NewAsterisk(tableName)
	_booking.ID = field.NewString(tableName, "id")
	_booking.CarVin = field.NewString(tableName, "car_vin")
	_booking.CustomerID = field.NewString(tableName, "customer_id")
	_booking.StartTime = field.NewTime(tableName, "start_time")
	_booking.EndTime = field.NewTime(tableName, "end_time")
	_booking.Status = field.NewString(tableName, "status")
	_booking.CreatedAt = field.NewTime(tableName, "created_at")
	_booking.Paidamount = field.NewFloat64(tableName, "paidamount")
	_booking.Currency = field.NewString(tableName, "currency")

	_booking.fillFieldMap()

	return _booking
}

type booking struct {
	bookingDo bookingDo

	ALL        field.Asterisk
	ID         field.String
	CarVin     field.String
	CustomerID field.String
	StartTime  field.Time
	EndTime    field.Time
	Status     field.String
	CreatedAt  field.Time
	Paidamount field.Float64
	Currency   field.String

	fieldMap map[string]field.Expr
}

func (b booking) Table(newTableName string) *booking {
	b.bookingDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b booking) As(alias string) *booking {
	b.bookingDo.DO = *(b.bookingDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *booking) updateTableName(table string) *booking {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.CarVin = field.NewString(table, "car_vin")
	b.CustomerID = field.NewString(table, "customer_id")
	b.StartTime = field.NewTime(table, "start_time")
	b.EndTime = field.NewTime(table, "end_time")
	b.Status = field.NewString(table, "status")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.Paidamount = field.NewFloat64(table, "paidamount")
	b.Currency = field.NewString(table, "currency")

	b.fillFieldMap()

	return b
}

func (b *booking) WithContext(ctx context.Context) *bookingDo { return b.bookingDo.WithContext(ctx) }

func (b booking) TableName() string { return b.bookingDo.TableName() }

func (b booking) Alias() string { return b.bookingDo.Alias() }

func (b booking) Columns(cols ...field.Expr) gen.Columns { return b.bookingDo.Columns(cols...) }

func (b *booking) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *booking) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 9)
	b.fieldMap["id"] = b.ID
	b.fieldMap["car_vin"] = b.CarVin
	b.fieldMap["customer_id"] = b.CustomerID
	b.fieldMap["start_time"] = b.StartTime
	b.fieldMap["end_time"] = b.EndTime
	b.fieldMap["status"] = b.Status
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["paidamount"] = b.Paidamount
	b.fieldMap["currency"] = b.Currency
}

func (b booking) clone(db *gorm.DB) booking {
	b.bookingDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b booking) replaceDB(db *gorm.DB) booking {
	b.bookingDo.ReplaceDB(db)
	return b
}

type bookingDo struct{ gen.DO }

func (b bookingDo) Debug() *bookingDo {
	return b.withDO(b.DO.Debug())
}

func (b bookingDo) WithContext(ctx context.Context) *bookingDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookingDo) ReadDB() *bookingDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookingDo) WriteDB() *bookingDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookingDo) Session(config *gorm.Session) *bookingDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookingDo) Clauses(conds ...clause.Expression) *bookingDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookingDo) Returning(value interface{}, columns ...string) *bookingDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookingDo) Not(conds ...gen.Condition) *bookingDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookingDo) Or(conds ...gen.Condition) *bookingDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookingDo) Select(conds ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookingDo) Where(conds ...gen.Condition) *bookingDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookingDo) Order(conds ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookingDo) Distinct(cols ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookingDo) Omit(cols ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookingDo) Join(table schema.Tabler, on ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bookingDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookingDo) RightJoin(table schema.Tabler, on ...field.Expr) *bookingDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookingDo) Group(cols ...field.Expr) *bookingDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookingDo) Having(conds ...gen.Condition) *bookingDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookingDo) Limit(limit int) *bookingDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookingDo) Offset(offset int) *bookingDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bookingDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookingDo) Unscoped() *bookingDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookingDo) Create(values ...*model.Booking) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookingDo) CreateInBatches(values []*model.Booking, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookingDo) Save(values ...*model.Booking) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookingDo) First() (*model.Booking, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Booking), nil
	}
}

func (b bookingDo) Take() (*model.Booking, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Booking), nil
	}
}

func (b bookingDo) Last() (*model.Booking, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Booking), nil
	}
}

func (b bookingDo) Find() ([]*model.Booking, error) {
	result, err := b.DO.Find()
	return result.([]*model.Booking), err
}

func (b bookingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Booking, err error) {
	buf := make([]*model.Booking, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookingDo) FindInBatches(result *[]*model.Booking, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookingDo) Attrs(attrs ...field.AssignExpr) *bookingDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookingDo) Assign(attrs ...field.AssignExpr) *bookingDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookingDo) Joins(fields ...field.RelationField) *bookingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookingDo) Preload(fields ...field.RelationField) *bookingDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookingDo) FirstOrInit() (*model.Booking, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Booking), nil
	}
}

func (b bookingDo) FirstOrCreate() (*model.Booking, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Booking), nil
	}
}

func (b bookingDo) FindByPage(offset int, limit int) (result []*model.Booking, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookingDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookingDo) Delete(models ...*model.Booking) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookingDo) withDO(do gen.Dao) *bookingDo {
	b.DO = *do.(*gen.DO)
	return b
}
