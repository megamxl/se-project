// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/megamxl/se-project/Rental-Server/internal/data/sql/dao/model"
)

func newRentalUser(db *gorm.DB, opts ...gen.DOOption) rentalUser {
	_rentalUser := rentalUser{}

	_rentalUser.rentalUserDo.UseDB(db, opts...)
	_rentalUser.rentalUserDo.UseModel(&model.RentalUser{})

	tableName := _rentalUser.rentalUserDo.TableName()
	_rentalUser.ALL = field.NewAsterisk(tableName)
	_rentalUser.ID = field.NewString(tableName, "id")
	_rentalUser.Name = field.NewString(tableName, "name")
	_rentalUser.Email = field.NewString(tableName, "email")
	_rentalUser.Password = field.NewString(tableName, "password")
	_rentalUser.CreatedAt = field.NewTime(tableName, "created_at")

	_rentalUser.fillFieldMap()

	return _rentalUser
}

type rentalUser struct {
	rentalUserDo rentalUserDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	Email     field.String
	Password  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (r rentalUser) Table(newTableName string) *rentalUser {
	r.rentalUserDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rentalUser) As(alias string) *rentalUser {
	r.rentalUserDo.DO = *(r.rentalUserDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rentalUser) updateTableName(table string) *rentalUser {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.Name = field.NewString(table, "name")
	r.Email = field.NewString(table, "email")
	r.Password = field.NewString(table, "password")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *rentalUser) WithContext(ctx context.Context) *rentalUserDo {
	return r.rentalUserDo.WithContext(ctx)
}

func (r rentalUser) TableName() string { return r.rentalUserDo.TableName() }

func (r rentalUser) Alias() string { return r.rentalUserDo.Alias() }

func (r rentalUser) Columns(cols ...field.Expr) gen.Columns { return r.rentalUserDo.Columns(cols...) }

func (r *rentalUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rentalUser) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["email"] = r.Email
	r.fieldMap["password"] = r.Password
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r rentalUser) clone(db *gorm.DB) rentalUser {
	r.rentalUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rentalUser) replaceDB(db *gorm.DB) rentalUser {
	r.rentalUserDo.ReplaceDB(db)
	return r
}

type rentalUserDo struct{ gen.DO }

func (r rentalUserDo) Debug() *rentalUserDo {
	return r.withDO(r.DO.Debug())
}

func (r rentalUserDo) WithContext(ctx context.Context) *rentalUserDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rentalUserDo) ReadDB() *rentalUserDo {
	return r.Clauses(dbresolver.Read)
}

func (r rentalUserDo) WriteDB() *rentalUserDo {
	return r.Clauses(dbresolver.Write)
}

func (r rentalUserDo) Session(config *gorm.Session) *rentalUserDo {
	return r.withDO(r.DO.Session(config))
}

func (r rentalUserDo) Clauses(conds ...clause.Expression) *rentalUserDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rentalUserDo) Returning(value interface{}, columns ...string) *rentalUserDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rentalUserDo) Not(conds ...gen.Condition) *rentalUserDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rentalUserDo) Or(conds ...gen.Condition) *rentalUserDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rentalUserDo) Select(conds ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rentalUserDo) Where(conds ...gen.Condition) *rentalUserDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rentalUserDo) Order(conds ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rentalUserDo) Distinct(cols ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rentalUserDo) Omit(cols ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rentalUserDo) Join(table schema.Tabler, on ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rentalUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rentalUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rentalUserDo) Group(cols ...field.Expr) *rentalUserDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rentalUserDo) Having(conds ...gen.Condition) *rentalUserDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rentalUserDo) Limit(limit int) *rentalUserDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rentalUserDo) Offset(offset int) *rentalUserDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rentalUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rentalUserDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rentalUserDo) Unscoped() *rentalUserDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rentalUserDo) Create(values ...*model.RentalUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rentalUserDo) CreateInBatches(values []*model.RentalUser, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rentalUserDo) Save(values ...*model.RentalUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rentalUserDo) First() (*model.RentalUser, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RentalUser), nil
	}
}

func (r rentalUserDo) Take() (*model.RentalUser, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RentalUser), nil
	}
}

func (r rentalUserDo) Last() (*model.RentalUser, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RentalUser), nil
	}
}

func (r rentalUserDo) Find() ([]*model.RentalUser, error) {
	result, err := r.DO.Find()
	return result.([]*model.RentalUser), err
}

func (r rentalUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RentalUser, err error) {
	buf := make([]*model.RentalUser, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rentalUserDo) FindInBatches(result *[]*model.RentalUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rentalUserDo) Attrs(attrs ...field.AssignExpr) *rentalUserDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rentalUserDo) Assign(attrs ...field.AssignExpr) *rentalUserDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rentalUserDo) Joins(fields ...field.RelationField) *rentalUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rentalUserDo) Preload(fields ...field.RelationField) *rentalUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rentalUserDo) FirstOrInit() (*model.RentalUser, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RentalUser), nil
	}
}

func (r rentalUserDo) FirstOrCreate() (*model.RentalUser, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RentalUser), nil
	}
}

func (r rentalUserDo) FindByPage(offset int, limit int) (result []*model.RentalUser, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rentalUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rentalUserDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rentalUserDo) Delete(models ...*model.RentalUser) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rentalUserDo) withDO(do gen.Dao) *rentalUserDo {
	r.DO = *do.(*gen.DO)
	return r
}
