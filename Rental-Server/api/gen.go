//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Currency.
const (
	AUD Currency = "AUD"
	BGN Currency = "BGN"
	BRL Currency = "BRL"
	CAD Currency = "CAD"
	CHF Currency = "CHF"
	CNY Currency = "CNY"
	CZK Currency = "CZK"
	DKK Currency = "DKK"
	EUR Currency = "EUR"
	GBP Currency = "GBP"
	HKD Currency = "HKD"
	HUF Currency = "HUF"
	IDR Currency = "IDR"
	ILS Currency = "ILS"
	INR Currency = "INR"
	ISK Currency = "ISK"
	JPY Currency = "JPY"
	KRW Currency = "KRW"
	MXN Currency = "MXN"
	MYR Currency = "MYR"
	NOK Currency = "NOK"
	NZD Currency = "NZD"
	PHP Currency = "PHP"
	PLN Currency = "PLN"
	RON Currency = "RON"
	SEK Currency = "SEK"
	SGD Currency = "SGD"
	THB Currency = "THB"
	TRY Currency = "TRY"
	USD Currency = "USD"
	ZAR Currency = "ZAR"
)

// Booking defines model for Booking.
type Booking struct {
	VIN        *string   `json:"VIN,omitempty"`
	BookingId  *string   `json:"bookingId,omitempty"`
	Currency   *Currency `json:"currency,omitempty"`
	PaidAmount *float32  `json:"paidAmount,omitempty"`
	Status     *string   `json:"status,omitempty"`
	UserId     *string   `json:"userId,omitempty"`
}

// BookingList defines model for BookingList.
type BookingList = []Booking

// Car defines model for Car.
type Car struct {
	VIN         *string  `json:"VIN,omitempty"`
	Brand       *string  `json:"brand,omitempty"`
	ImageURL    *string  `json:"imageURL,omitempty"`
	Model       *string  `json:"model,omitempty"`
	PricePerDay *float32 `json:"pricePerDay,omitempty"`
}

// CarList defines model for CarList.
type CarList = []struct {
	VIN          *string   `json:"VIN,omitempty"`
	Brand        *string   `json:"brand,omitempty"`
	Currency     *Currency `json:"currency,omitempty"`
	ImageURL     *string   `json:"imageURL,omitempty"`
	Model        *string   `json:"model,omitempty"`
	PriceOverAll *float32  `json:"priceOverAll,omitempty"`
	PricePerDay  *float32  `json:"pricePerDay,omitempty"`
}

// Currency defines model for Currency.
type Currency string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// Token The authentication token
	Token *string `json:"token,omitempty"`
}

// User defines model for User.
type User struct {
	Email    *string `json:"email,omitempty"`
	Id       *string `json:"id,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserList defines model for UserList.
type UserList = []User

// UserMutation The escape-room instance to join
type UserMutation struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
	Username *string              `json:"username,omitempty"`
}

// DeleteBookingParams defines parameters for DeleteBooking.
type DeleteBookingParams struct {
	BookingId string `form:"bookingId" json:"bookingId"`
}

// BookCarJSONBody defines parameters for BookCar.
type BookCarJSONBody struct {
	VIN       *string    `json:"VIN,omitempty"`
	Currency  *Currency  `json:"currency,omitempty"`
	EndTime   *time.Time `json:"endTime,omitempty"`
	StartTime *time.Time `json:"startTime,omitempty"`
}

// UpdateBookingJSONBody defines parameters for UpdateBooking.
type UpdateBookingJSONBody struct {
	BookingId *string `json:"bookingId,omitempty"`
	Status    *string `json:"status,omitempty"`
}

// DeleteCarParams defines parameters for DeleteCar.
type DeleteCarParams struct {
	VIN string `form:"VIN" json:"VIN"`
}

// ListCarsParams defines parameters for ListCars.
type ListCarsParams struct {
	// Currency The currency The user want to pay in
	Currency Currency `form:"currency" json:"currency"`

	// StartTime Start time for filtering cars based on availability
	StartTime *time.Time `form:"startTime,omitempty" json:"startTime,omitempty"`

	// EndTime End time for filtering cars based on availability
	EndTime *time.Time `form:"endTime,omitempty" json:"endTime,omitempty"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	// Email The user's email address
	Email openapi_types.Email `json:"email"`

	// Password The user's password
	Password string `json:"password"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	Id string `form:"id" json:"id"`
}

// BookCarJSONRequestBody defines body for BookCar for application/json ContentType.
type BookCarJSONRequestBody BookCarJSONBody

// UpdateBookingJSONRequestBody defines body for UpdateBooking for application/json ContentType.
type UpdateBookingJSONRequestBody UpdateBookingJSONBody

// AddCarJSONRequestBody defines body for AddCar for application/json ContentType.
type AddCarJSONRequestBody = Car

// UpdateCarJSONRequestBody defines body for UpdateCar for application/json ContentType.
type UpdateCarJSONRequestBody = Car

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = UserMutation

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserMutation

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Cancel a booking
	// (DELETE /booking)
	DeleteBooking(w http.ResponseWriter, r *http.Request, params DeleteBookingParams)
	// Get all bookings by a user
	// (GET /booking)
	GetBookings(w http.ResponseWriter, r *http.Request)
	// Book a car
	// (POST /booking)
	BookCar(w http.ResponseWriter, r *http.Request)
	// Update a booking
	// (PUT /booking)
	UpdateBooking(w http.ResponseWriter, r *http.Request)
	// Get a specific booking
	// (GET /booking/{id})
	GetBookingById(w http.ResponseWriter, r *http.Request, id string)
	// Get All Bookings
	// (GET /bookings/all/)
	GetAllBookingsByUser(w http.ResponseWriter, r *http.Request)
	// Delete a car
	// (DELETE /cars)
	DeleteCar(w http.ResponseWriter, r *http.Request, params DeleteCarParams)
	// List available cars
	// (GET /cars)
	ListCars(w http.ResponseWriter, r *http.Request, params ListCarsParams)
	// Add a new car
	// (POST /cars)
	AddCar(w http.ResponseWriter, r *http.Request)
	// Update car details
	// (PUT /cars)
	UpdateCar(w http.ResponseWriter, r *http.Request)
	// User login using email and password
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)
	// Get user info
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /users)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /users/all)
	DeleteUser(w http.ResponseWriter, r *http.Request, params DeleteUserParams)
	// Get all users
	// (GET /users/all)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Update user details
	// (PUT /users/all)
	UpdateUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteBooking operation middleware
func (siw *ServerInterfaceWrapper) DeleteBooking(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteBookingParams

	// ------------- Required query parameter "bookingId" -------------

	if paramValue := r.URL.Query().Get("bookingId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "bookingId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "bookingId", r.URL.Query(), &params.BookingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookingId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBooking(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBookings operation middleware
func (siw *ServerInterfaceWrapper) GetBookings(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BookCar operation middleware
func (siw *ServerInterfaceWrapper) BookCar(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BookCar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateBooking operation middleware
func (siw *ServerInterfaceWrapper) UpdateBooking(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBooking(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBookingById operation middleware
func (siw *ServerInterfaceWrapper) GetBookingById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookingById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllBookingsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAllBookingsByUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllBookingsByUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCar operation middleware
func (siw *ServerInterfaceWrapper) DeleteCar(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCarParams

	// ------------- Required query parameter "VIN" -------------

	if paramValue := r.URL.Query().Get("VIN"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "VIN"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "VIN", r.URL.Query(), &params.VIN)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "VIN", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCar(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCars operation middleware
func (siw *ServerInterfaceWrapper) ListCars(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCarsParams

	// ------------- Required query parameter "currency" -------------

	if paramValue := r.URL.Query().Get("currency"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "currency"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startTime", Err: err})
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endTime", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCars(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddCar operation middleware
func (siw *ServerInterfaceWrapper) AddCar(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCar operation middleware
func (siw *ServerInterfaceWrapper) UpdateCar(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/booking", wrapper.DeleteBooking)
	m.HandleFunc("GET "+options.BaseURL+"/booking", wrapper.GetBookings)
	m.HandleFunc("POST "+options.BaseURL+"/booking", wrapper.BookCar)
	m.HandleFunc("PUT "+options.BaseURL+"/booking", wrapper.UpdateBooking)
	m.HandleFunc("GET "+options.BaseURL+"/booking/{id}", wrapper.GetBookingById)
	m.HandleFunc("GET "+options.BaseURL+"/bookings/all/", wrapper.GetAllBookingsByUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/cars", wrapper.DeleteCar)
	m.HandleFunc("GET "+options.BaseURL+"/cars", wrapper.ListCars)
	m.HandleFunc("POST "+options.BaseURL+"/cars", wrapper.AddCar)
	m.HandleFunc("PUT "+options.BaseURL+"/cars", wrapper.UpdateCar)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.Login)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUsers)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.RegisterUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/all", wrapper.DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/users/all", wrapper.GetAllUsers)
	m.HandleFunc("PUT "+options.BaseURL+"/users/all", wrapper.UpdateUser)

	return m
}
