//
// Booking.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "OpenAPIClientAPI.Booking")
public typealias Booking = OpenAPIClientAPI.Booking

extension OpenAPIClientAPI {

public struct Booking: Codable, JSONEncodable, Hashable {

    public var bookingId: String?
    public var userId: String?
    public var VIN: String?
    public var status: String?
    public var paidAmount: Double?
    public var currency: Currency?
    public var startDate: String?
    public var endDate: String?

    public init(bookingId: String? = nil, userId: String? = nil, VIN: String? = nil, status: String? = nil, paidAmount: Double? = nil, currency: Currency? = nil, startDate: String? = nil, endDate: String? = nil) {
        self.bookingId = bookingId
        self.userId = userId
        self.VIN = VIN
        self.status = status
        self.paidAmount = paidAmount
        self.currency = currency
        self.startDate = startDate
        self.endDate = endDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bookingId
        case userId
        case VIN
        case status
        case paidAmount
        case currency
        case startDate
        case endDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bookingId, forKey: .bookingId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(VIN, forKey: .VIN)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(paidAmount, forKey: .paidAmount)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
    }
}

}
